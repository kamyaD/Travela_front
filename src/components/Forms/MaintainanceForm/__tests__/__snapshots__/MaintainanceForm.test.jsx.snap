// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MaintainanceForm /> renders correctly 1`] = `
<FormContext
  errors={Object {}}
  targetForm={
    MaintainceForm {
      "context": Object {},
      "defaultState": Object {
        "errors": Object {},
        "hasBlankFields": true,
        "hideNotificationPane": true,
        "hideOverlay": false,
        "hideSideBar": false,
        "openSearch": false,
        "selectedLink": "settings page",
        "values": Object {
          "maintainanceEnd": "",
          "maintainanceStart": "",
          "reason": "",
        },
      },
      "handleClearForm": [Function],
      "handleMaintenanceValues": [Function],
      "handleSetState": [Function],
      "props": Object {
        "addmaintenanceRecord": [Function],
        "closeModal": [Function],
        "editMaintenance": Object {
          "maintenance": Object {},
        },
        "errors": Array [],
        "guestHouseId": "",
        "history": Object {
          "push": [Function],
        },
        "id": "1",
        "isLoading": false,
        "maintenance": Object {},
        "managers": Array [
          Object {
            "email": "test.user@andela.com",
            "fullName": "Test User",
          },
        ],
        "modalType": "",
        "onChange": [Function],
        "onNotificationToggle": [Function],
        "shouldOpen": false,
        "showId": [Function],
        "size": 10,
        "status": false,
        "timelineDateRange": Array [],
        "updateMaintenanceRecord": [Function],
      },
      "refs": Object {},
      "setState": [Function],
      "state": Object {
        "errors": Object {},
        "hasBlankFields": true,
        "hideNotificationPane": true,
        "hideOverlay": false,
        "hideSideBar": false,
        "openSearch": false,
        "selectedLink": "settings page",
        "values": Object {
          "maintainanceEnd": "",
          "maintainanceStart": "",
          "reason": "",
        },
      },
      "submitEditedMaintenanceData": [Function],
      "submitMaintainanceData": [Function],
      "updater": Updater {
        "_callbacks": Array [],
        "_renderer": ReactShallowRenderer {
          "_context": Object {},
          "_element": <MaintainceForm
            addmaintenanceRecord={[Function]}
            closeModal={[Function]}
            editMaintenance={
                    Object {
                            "maintenance": Object {},
                          }
            }
            errors={Array []}
            guestHouseId=""
            history={
                    Object {
                            "push": [Function],
                          }
            }
            id="1"
            isLoading={false}
            maintenance={Object {}}
            managers={
                    Array [
                            Object {
                              "email": "test.user@andela.com",
                              "fullName": "Test User",
                            },
                          ]
            }
            modalType=""
            onChange={[Function]}
            onNotificationToggle={[Function]}
            shouldOpen={false}
            showId={[Function]}
            size={10}
            status={false}
            timelineDateRange={Array []}
            updateMaintenanceRecord={[Function]}
    />,
          "_forcedUpdate": false,
          "_instance": [Circular],
          "_newState": Object {
            "errors": Object {},
            "hasBlankFields": true,
            "hideNotificationPane": true,
            "hideOverlay": false,
            "hideSideBar": false,
            "openSearch": false,
            "selectedLink": "settings page",
            "values": Object {
              "maintainanceEnd": "",
              "maintainanceStart": "",
              "reason": "",
            },
          },
          "_rendered": <FormContext
            errors={Object {}}
            targetForm={[Circular]}
            validatorName="validate"
            values={
                    Object {
                            "maintainanceEnd": "",
                            "maintainanceStart": "",
                            "reason": "",
                          }
            }
    >
            <form
                    className="maintainance-form"
                    onSubmit={[Function]}
            >
                    <MaintainanceFieldSets
                            editMaintenance={
                                    Object {
                                            "maintenance": Object {},
                                          }
                            }
                            hasBlankFields={true}
                            values={
                                    Object {
                                            "maintainanceEnd": "",
                                            "maintainanceStart": "",
                                            "reason": "",
                                          }
                            }
                    />
                    <div
                            className="maintainence-line"
                    />
                    <div
                            className="maintainence-submit-area"
                    >
                            <button
                                    className="bg-btn bg-btn--inactive btn-cancel"
                                    onClick={[Function]}
                                    type="button"
                            >
                                    Cancel
                            </button>
                            <button
                                    className="bg-btn bg-btn--active"
                                    disabled={true}
                                    id="submit"
                                    type="submit"
                            >
                                    Save Changes
                            </button>
                    </div>
            </form>
    </FormContext>,
          "_rendering": false,
          "_updater": [Circular],
        },
      },
      "validate": [Function],
      Symbol(enzyme.__setState__): [Function],
    }
  }
  validatorName="validate"
  values={
    Object {
      "maintainanceEnd": "",
      "maintainanceStart": "",
      "reason": "",
    }
  }
>
  <form
    className="maintainance-form"
    onSubmit={[Function]}
  >
    <MaintainanceFieldSets
      editMaintenance={
        Object {
          "maintenance": Object {},
        }
      }
      hasBlankFields={true}
      values={
        Object {
          "maintainanceEnd": "",
          "maintainanceStart": "",
          "reason": "",
        }
      }
    />
    <div
      className="maintainence-line"
    />
    <div
      className="maintainence-submit-area"
    >
      <button
        className="bg-btn bg-btn--inactive btn-cancel"
        onClick={[Function]}
        type="button"
      >
        Cancel
      </button>
      <button
        className="bg-btn bg-btn--active"
        disabled={true}
        id="submit"
        type="submit"
      >
        Save Changes
      </button>
    </div>
  </form>
</FormContext>
`;
